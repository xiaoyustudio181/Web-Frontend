/*【列表渲染】注意事项：
一，由于 JavaScript 的限制，Vue 不能检测以下变动的数组：
1，当用索引设置项时，如vm.items[index]=newValue；
2，当修改数组长度时，如vm.items.length=newLength。
　　为解决问题1，可用以下两种方式：
Vue.set(example1.items, indexOfItem, newValue)
example1.items.splice(indexOfItem, 1, newValue)
　　为解决问题2：
example1.items.splice(newLength)

二，还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：
 var vm = new Vue({
 data: {a: 1}
 }); // `vm.a` 现在是响应式的。
 vm.b = 2; // `vm.b` 不是响应式的。

 　　对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。例如，对于：
 var vm = new Vue({
   data: {
     userProfile: {name: 'Anika'}
   }
})
　　你可以添加一个新的 age 属性到嵌套的 userProfile 对象：
Vue.set(vm.userProfile, 'age', 27)
　　你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：
this.$set(this.userProfile, 'age', 27)
　　有时你可能需要为已有对象赋予多个新属性，比如使用 Object.assign() 或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：
Object.assign(this.userProfile, {age: 27,favoriteColor: 'Vue Green'})
 　　你应该这样做：
this.userProfile = Object.assign({}, this.userProfile, {age: 27,favoriteColor: 'Vue Green'})
*/
/*【事件修饰符】.stop .prevent. capture .self .once
<a v-on:click.stop="doThis"></a> <!-- 阻止单击事件继续传播 -->
<form v-on:submit.prevent="onSubmit"></form> <!-- 提交事件不再重载页面 -->
<a v-on:click.stop.prevent="doThat"></a> <!-- 修饰符可以串联 -->
<form v-on:submit.prevent></form> <!-- 只有修饰符 -->

<div v-on:click.capture="doThis">...</div>
<!-- 添加事件监听器时使用事件捕获模式 -->
<!-- 即内部元素触发的事件先在此处处理，然后才交由内部元素自身进行处理 -->

<div v-on:click.self="doThat">...</div>
<!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
<!-- 即事件不是从内部元素触发的 -->

<a v-on:click.once="doThis"></a> <!-- 点击事件将只会触发一次 -->

　　使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 @click.prevent.self 会阻止所有的点击，而 @click.self.prevent 只会阻止对元素自身的点击。
*/
/*【按键别名】
 .enter
 .tab
 .delete (捕获“删除”和“退格”键)
 .esc
 .space
 .up
 .down
 .left
 .right
 可以通过全局 config.keyCodes 对象自定义按键修饰符别名：
 Vue.config.keyCodes.f1 = 112

 .ctrl
 .alt
 .shift
 .meta
 */

/*修饰符：.lazy .number .trim
     修饰符 lazy ，变为在 change 事件中同步：<!-- 在 "change" 而不是 "input" 事件中更新 -->
    <input v-model.lazy="msg" > 
如果想自动将用户的输入值转为 Number 类型 (如果原值的转换结果为 NaN 则返回原值)，可以添加一个修饰符 number 给 v-model 来处理输入值：
    <input v-model.number="age" type="number">
如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：
    <input v-model.trim="msg">
*/